@{
    ViewData["Title"] = "Voice Chat with AI";
    Layout = null;
}

<link rel="stylesheet" href="~/css/voicechat.css" />

@Html.AntiForgeryToken()

<a class="home-button" href="/Home/Index">
    <span>Quay lại</span>
</a>

<div class="voice-chat-container">
    <div class="ai-avatar-section">
        <div class="avatar-container">
            <img id="aiAvatar" src="/images/voice-chat/ai-avatar-1.jpg" alt="AI Avatar" class="ai-avatar" />
            <div class="avatar-glow"></div>
        </div>

        <div class="chat-info">
            <h1 class="ai-name">Tôi là <span class="highlight-pink">Shifra</span>, trợ lý <span class="highlight-cyan">ảo</span> của bạn</h1>
        </div>

        <div class="voice-controls">
            <div id="listeningIndicator" class="listening-indicator" style="display: none;">
                <img src="/images/voice-chat/user-voice.gif" alt="Listening" class="status-gif" />
            </div>

            <div id="processingIndicator" class="processing-indicator" style="display: none;">
                <img src="/images/voice-chat/loading.gif" alt="Processing" class="status-gif" />
                <p>Bạn đợi một xíu nhé...</p>
            </div>

            <button id="voiceButton" class="voice-btn">
                <i class="mic-icon">🎤</i>
                <span class="btn-text">Nhấn để nói chuyện với tôi</span>
            </button>
        </div>
    </div>
</div>

<script>
    class VoiceChat {
        constructor() {
            // Khởi tạo các API trình duyệt
            this.recognition = null;
            this.synthesis = window.speechSynthesis;

            // Trạng thái hoạt động
            this.isListening = false;
            this.isSpeaking = false;
            this.isProcessing = false;

            // Lấy reference các element DOM
            this.voiceButton = document.getElementById('voiceButton');
            this.listeningIndicator = document.getElementById('listeningIndicator');
            this.processingIndicator = document.getElementById('processingIndicator');
            this.aiAvatar = document.getElementById('aiAvatar');

            // Khởi tạo các chức năng
            this.initSpeechRecognition();
            this.bindEvents();
        }

        initSpeechRecognition() {
            if ('webkitSpeechRecognition' in window) {
                this.recognition = new webkitSpeechRecognition();
            } else if ('SpeechRecognition' in window) {
                this.recognition = new SpeechRecognition();
            } else {
                alert('Trình duyệt không hỗ trợ nhận diện giọng nói');
                return;
            }

            this.recognition.continuous = true;
            this.recognition.interimResults = false;
            this.recognition.lang = 'vi-VN';

            this.recognition.onstart = () => {
                this.isListening = true;
                this.showListening();
            };

            this.recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                this.handleUserSpeech(transcript);
            };

            this.recognition.onerror = (event) => {
                this.hideAllIndicators();
                this.updateVoiceButton();
                console.error(`Lỗi nhận diện: ${event.error}`);
            };

            this.recognition.onend = () => {
                this.isListening = false;
                if (!this.isProcessing) {
                    this.hideAllIndicators();
                    this.updateVoiceButton();
                }
            };
        }

        createUtterance(text) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'vi-VN';
            utterance.rate = 0.85;
            utterance.pitch = 0.6;
            utterance.volume = 0.9

            const vietnameseVoice = this.synthesis.getVoices().find(voice =>
                (voice.lang.includes('vi') || voice.lang.includes('VN')) &&
                (voice.name.toLowerCase().includes('male'))
            );

            if (vietnameseVoice) {
                utterance.voice = vietnameseVoice;
            }

            utterance.onstart = () => {
                this.isSpeaking = true;
                this.aiAvatar.classList.add('speaking');
                this.updateVoiceButton();
            };

            utterance.onend = () => {
                this.isSpeaking = false;
                this.aiAvatar.classList.remove('speaking');
                this.updateVoiceButton();
            };

            utterance.onerror = (event) => {
                this.isSpeaking = false;
                this.updateVoiceButton();
                console.error(`Lỗi phát âm: ${event.error}`);
            };

            return utterance;
        }

        bindEvents() {
            this.voiceButton.addEventListener('click', () => {
                if (this.isListening) {
                    this.stopListening();
                } else if (this.isSpeaking) {
                    this.stopSpeaking();
                } else {
                    this.startListening();
                }
            });
        }

        startListening() {
            if (!this.recognition) {
                alert('Nhận diện giọng nói không khả dụng');
                return;
            }
            this.recognition.start();
        }

        showListening() {
            this.listeningIndicator.style.display = 'block';
            this.updateVoiceButton();
        }

        stopListening() {
            if (this.recognition && this.isListening) {
                this.recognition.stop();
            }
        }

        startSpeaking(text) {
            if (!this.synthesis) {
                alert('Trình duyệt không hỗ trợ text-to-speech');
                return;
            }

            this.synthesis.cancel();
            const utterance = this.createUtterance(text);
            this.synthesis.speak(utterance);
        }

        stopSpeaking() {
            this.synthesis.cancel();
            this.isSpeaking = false;
            this.aiAvatar.classList.remove('speaking');
            this.updateVoiceButton();
        }

        showProcessing() {
            this.hideAllIndicators();
            this.isProcessing = true;
            this.processingIndicator.style.display = 'block';
            this.voiceButton.classList.add('hidden');
        }

        hideAllIndicators() {
            this.listeningIndicator.style.display = 'none';
            this.processingIndicator.style.display = 'none';
            this.isListening = false;
            this.isProcessing = false;
            this.voiceButton.classList.remove('hidden');
        }

        updateVoiceButton() {
            if (this.isListening) {
                this.voiceButton.querySelector('.btn-text').textContent = 'Nhấn để dừng ghi âm';
                this.voiceButton.classList.remove('speaking');
                this.voiceButton.classList.add('listening');
            } else if (this.isSpeaking) {
                this.voiceButton.querySelector('.btn-text').textContent = 'Nhấn để dừng phát';
                this.voiceButton.classList.remove('listening');
                this.voiceButton.classList.add('speaking');
            } else {
                this.voiceButton.querySelector('.btn-text').textContent = 'Nhấn để nói chuyện với tôi';
                this.voiceButton.classList.remove('listening', 'speaking');
            }
        }

        async handleUserSpeech(transcript) {
            this.showProcessing();

            console.log("log : ", transcript);

            try {
                const response = await fetch('/Ais/AskGemini', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ question: transcript })
                });

                if (!response.ok) {
                    throw new Error('Lỗi từ server');
                }

                const data = await response.json();
                this.hideAllIndicators();
                this.startSpeaking(data.answer);

            } catch (error) {
                this.hideAllIndicators();
                const errorMsg = 'Xin lỗi, tôi không thể xử lý câu hỏi của bạn lúc này.';
                this.startSpeaking(errorMsg);
                console.error(`Lỗi: ${error.message}`);
            }
        }
    }

    // Khởi tạo ứng dụng VoiceChat khi DOM đã load xong
    document.addEventListener('DOMContentLoaded', () => {
        new VoiceChat();
    });
</script>

