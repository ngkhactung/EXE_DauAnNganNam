<!-- Chatbot Widget -->
<div id="chatbot-widget">
    <div id="chat-header" onclick="toggleChat()">💬 Hỏi Đáp</div>
    <div id="chat-body" style="display:none;">
        @Html.AntiForgeryToken()
        <div id="chat-messages"></div>
        <input type="text" id="chat-input" placeholder="Nhập câu hỏi..." onkeydown="handleKey(event)">
    </div>
</div>

<style>
    #chatbot-widget {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 300px;
        font-family: Arial, sans-serif;
        z-index: 9999;
        box-shadow: 0 0 10px rgba(0,0,0,0.2);
    }

    #chat-header {
        background: #007bff;
        color: white;
        padding: 10px;
        border-radius: 10px 10px 0 0;
        cursor: pointer;
    }

    #chat-body {
        background: #fff;
        border: 1px solid #ccc;
        border-top: none;
        padding: 10px;
        max-height: 700px;
        overflow-y: auto;
        border-radius: 0 0 10px 10px;
    }

    #chat-messages {
        height: 400px;
        overflow-y: auto;
        margin-bottom: 10px;
    }

    #chat-input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .chat-bubble {
        margin: 5px 0;
        padding: 8px 12px;
        border-radius: 15px;
        max-width: 90%;
        display: inline-block;
        clear: both;
    }

    .bot {
        background-color: #f1f1f1;
        float: left;
    }

    .user {
        background-color: #007bff;
        color: white;
        float: right;
    }
</style>
<script>
    function toggleChat() {
        const body = document.getElementById("chat-body");
        body.style.display = body.style.display === "none" ? "block" : "none";
    }

    function handleKey(event) {
        if (event.key === "Enter") {
            const input = document.getElementById("chat-input");
            const message = input.value.trim();
            if (message) {
                appendMessage("user", message);
                input.value = "";
                askGeminiFromChat(message);
            }
        }
    }

    function appendMessage(sender, text) {
        const container = document.getElementById("chat-messages");
        const msg = document.createElement("div");
        msg.className = `chat-bubble ${sender}`;
        msg.innerText = text;
        container.appendChild(msg);
        container.scrollTop = container.scrollHeight;
    }

    async function askGeminiFromChat(question) {
        appendMessage("bot", "⏳ Đang xử lý...");
        try {
            const response = await fetch('@Url.Action("AskGemini", "Ais")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ question })
            });

            // Xóa tin nhắn "Đang xử lý..."
            const loadingMsg = document.querySelector("#chat-messages .bot:last-child");
            if (loadingMsg && loadingMsg.innerText.includes("Đang xử lý")) {
                loadingMsg.remove();
            }

            if (!response.ok) {
                const errorData = await response.json();
                appendMessage("bot", `❌ Lỗi: ${errorData.error || response.statusText}`);
                return;
            }

            const data = await response.json();
            appendMessage("bot", data.answer);
            playAnswerAudio(data.answer);

        } catch (error) {
            console.error('Error:', error);
            appendMessage("bot", '❌ Đã có lỗi xảy ra khi kết nối tới server.');
        }

        async function playAnswerAudio(answerText) {

            try {
                const response = await fetch('/Ais/TextToSpeech', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ text: answerText })
                });

                if (!response.ok) throw new Error('Không thể phát âm thanh.');

                const audioBlob = await response.blob();
                const audioUrl = URL.createObjectURL(audioBlob);
                const audio = new Audio(audioUrl);
                audio.play();
            } catch (error) {
                //alert("Đã xảy ra lỗi khi phát âm thanh.");
            }
        }
    }
</script>
